error_log /dev/stderr warn;

worker_processes auto;

events {
  worker_connections 65536;
  multi_accept on;
}

http {

  # $upstream_connect_time – The time spent on establishing a connection with an upstream server
  # $upstream_header_time – The time between establishing a connection and receiving the first byte of the response header from the upstream server
  # $upstream_response_time – The time between establishing a connection and receiving the last byte of the response body from the upstream server
  # $request_time – The total time spent processing a request
  # All time values are measured in seconds with millisecond resolution.

  log_format bench '$remote_addr [$time_local] host="$http_host" "$request" '
                   '$status bs=$body_bytes_sent ref="$http_referer" '
                   'ua="$http_user_agent" '
                   'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

  access_log /dev/stdout bench;

  proxy_redirect off;
  proxy_intercept_errors on;
  proxy_buffering on;
  proxy_buffer_size 128k;
  proxy_buffers 256 16k;
  proxy_busy_buffers_size 256k;
  proxy_temp_file_write_size 256k;
  proxy_max_temp_file_size 0;
  proxy_read_timeout 300;
  keepalive_timeout 10;

  # static text server used to establish a baseline for what's possible with
  # http connections.
  server {
      listen 80 default_server;
      server_name static.benchmark.local;

      location /warmup {
          return 200 'OK';
          add_header Content-Type text/plain;
      }
      location /alive {
          return 200 'OK';
          add_header Content-Type text/plain;
      }
      location /login {
          return 200 '{"token":"bGV0bWVpbg==","user":"admin"}';
          add_header Content-Type application/json;
      }
      location /platform {
          return 200 'nginx $nginx_version';
          add_header Content-Type text/plain;
      }
  }

  server {
    listen 80;
    server_name hanami;

    location / {
      proxy_pass http://hanami:7000;
    }
  }

  server {
    listen 80;
    server_name rails;

    location / {
      proxy_pass http://rails:7000;
    }
  }

  server {
    listen 80;
    server_name phoenix;

    location / {
      proxy_pass http://phoenix:7000;
    }
  }

  server {
    listen 80;
    server_name amber;

    location / {
      proxy_pass http://amber:7000;
    }
  }
}
